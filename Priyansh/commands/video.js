const fs = require("fs");
const path = require("path");
const request = require("request");
const yts = require("yt-search");

module.exports.config = {
  name: "video",
  version: "2.0.0",
  hasPermission: 0,
  credits: "SHANKAR + ChatGPT",
  description: "Smart YouTube video downloader using trigger",
  commandCategory: "media",
  usePrefix: false,
  cooldowns: 5
};

const triggerWords = ["pika", "bot", "shankar"];
const keywordMatchers = ["video", "bhejo", "bhej", "dikhao", "lagao"];

module.exports.handleEvent = async function ({ api, event }) {
  let message = event.body?.toLowerCase();
  if (!message) return;

  const foundTrigger = triggerWords.find(trigger => message.startsWith(trigger));
  if (!foundTrigger) return;

  let content = message.slice(foundTrigger.length).trim();
  if (!content) return;

  const words = content.split(/\s+/);
  const keywordIndex = words.findIndex(word => keywordMatchers.includes(word));
  if (keywordIndex === -1 || keywordIndex === words.length - 1) return;

  let possibleWords = words.slice(keywordIndex + 1);
  possibleWords = possibleWords.filter(word => !keywordMatchers.includes(word));
  const query = possibleWords.join(" ").trim();
  if (!query) return;

  // Simulate run command
  module.exports.run({ api, event, args: query.split(" ") });
};

module.exports.run = async function({ api, event, args }) {
  const query = args.join(" ");
  if (!query) return api.sendMessage("‚ùå | ‡§ï‡•É‡§™‡§Ø‡§æ ‡§ï‡§ø‡§∏‡•Ä ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§≤‡§ø‡§ñ‡•á‡§Ç‡•§\n‡§â‡§¶‡§æ‡§π‡§∞‡§£: video ‡§≤‡§æ‡§≤ ‡§¶‡•Å‡§™‡§ü‡•ç‡§ü‡§æ", event.threadID);

  try {
    const searching = await api.sendMessage(`üîç | "${query}" Apki Request Jari Hai Please Wait...`, event.threadID);
    const searchResult = await yts(query);
    const video = searchResult.videos[0];

    if (!video) {
      return api.sendMessage("‚ùå | ‡§ï‡•ã‡§à ‡§≠‡•Ä ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§", event.threadID);
    }

    const videoUrl = video.url;
    const title = video.title.replace(/[^\w\s]/gi, '').substring(0, 50);
    const fileName = `${Date.now()}-${title}.mp4`;
    const filePath = path.join(__dirname, "cache", fileName);

    const apiUrl = `https://shankar-all-apis.vercel.app/api/ytdl?url=${encodeURIComponent(videoUrl)}`;

    request({ url: apiUrl, json: true }, (err, res, body) => {
      if (err || !body.status || !body.result || !body.result.download_url) {
        return api.sendMessage("‚ùå | ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§≤‡§ø‡§Ç‡§ï ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•Å‡§à‡•§", event.threadID);
      }

      const downloadUrl = body.result.download_url;

      request(downloadUrl)
        .pipe(fs.createWriteStream(filePath))
        .on("finish", async () => {
          const stats = fs.statSync(filePath);
          const fileSizeMB = stats.size / (1024 * 1024);

          if (fileSizeMB > 25) {
            const readStream = fs.createReadStream(filePath);
            const uploadReq = request.post("https://transfer.sh/" + fileName, async (err, resp, body) => {
              fs.unlinkSync(filePath);
              if (err) {
                return api.sendMessage(`‚ùå | ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§¨‡§π‡•Å‡§§ ‡§¨‡§°‡§º‡§æ ‡§π‡•à ‡§î‡§∞ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•Å‡§à: ${err.message}`, event.threadID);
              }
              return api.sendMessage(`‚ö†Ô∏è | ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§∏‡§æ‡§á‡§ú: ${fileSizeMB.toFixed(2)}MB\nüíæ ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§≤‡§ø‡§Ç‡§ï:\n${body}`, event.threadID);
            });
            readStream.pipe(uploadReq);
          } else {
            await api.sendMessage({
              body: `üé¨ | "${title}"  ¬ª¬ªùë∂ùëæùëµùë¨ùëπ¬´¬´‚òÖ‚Ñ¢  ¬ª¬ªùë∫ùëØùë®ùë®ùëµ ùë≤ùëØùë®ùëµ¬´¬´
          ü•ÄùíÄùë¨ ùë≥ùë∂ ùë©ùë®ùë©ùíÄ ùë®ùë∑ùë≤ùë∞ ùëΩùë∞ùë´ùë¨ùë∂üëà`,
              attachment: fs.createReadStream(filePath)
            }, event.threadID, () => fs.unlinkSync(filePath));
          }

          api.unsendMessage(searching.messageID);
        })
        .on("error", async error => {
          fs.unlinkSync(filePath);
          return api.sendMessage(`‚ùå | ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ: ${error.message}`, event.threadID);
        });
    });

  } catch (e) {
    console.error(e);
    api.sendMessage("‚ùå | ‡§ï‡•ã‡§à ‡§Ö‡§®‡§™‡•á‡§ï‡•ç‡§∑‡§ø‡§§ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•Å‡§à‡•§", event.threadID);
  }
};